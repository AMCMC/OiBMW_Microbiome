sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
phyloseq::ordinate
vegan::pcoa
pcoa
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
.cran_packages <- c("ggplot2", "reshape2", "stringr","phangorn","DT","ape","ggrepel","knitr","Hmisc")
.bioc_packages <- c("dada2", "phyloseq","ShortRead","DECIPHER","ggtree")
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
theme_set(theme_bw())
pcoa
pcoa(rn = )
PCoA <- pcoa(as.dist(simmat))
# setting global options for the rmd markdown
knitr::opts_chunk$set(echo = T) # include chunck code
knitr::opts_chunk$set(cache = T) # use chuck results from cache if not modified (speed)
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Load_data.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Manual_Download_github.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/rmd_from_rstudio.png")
}
if (!"knitr" %in% installed.packages()){install.packages("knitr")}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Library_prep.png")
}
.cran_packages <- c("ggplot2", "reshape2", "stringr","phangorn","DT","ape","ggrepel","knitr","Hmisc")
.bioc_packages <- c("dada2", "phyloseq","ShortRead","DECIPHER","ggtree")
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
theme_set(theme_bw())
FQF <- "./Raw_data/L3_MOCK1.F.fastq.gz"
FQR <- "./Raw_data/L3_MOCK1.R.fastq.gz"
plotQualityProfile(c(FQF,FQR))
# get the expected error rates and generate the data.frame
cumelative_error_F <- apply(10^(-as.matrix(PhredQuality(quality(readFastq(FQF)[1:1000])))/10),1,cumsum)
cumelative_error_R <- apply(10^(-as.matrix(PhredQuality(quality(readFastq(FQR)[1:1000])))/10),1,cumsum)
# convert the data into long format (required for ggplot2)
cumelative_error_F_long <- data.frame(reshape2::melt(cumelative_error_F), read="Forward")
cumelative_error_R_long <- data.frame(reshape2::melt(cumelative_error_R), read="Reverse")
df.long <- rbind(cumelative_error_F_long, cumelative_error_R_long)
#df.long$Var1 <- factor(ceiling(df.long$Var1/10)*10) # bin the cycles into ba
ggplot(df.long, aes(x=Var1, y=value)) +
labs(y="Cumulative expected error rate", x="Cycle number") +
facet_wrap(~read) +
geom_smooth(stat = 'summary', color = 'red', fill = 'red', alpha = 0.2,
fun.data = median_hilow, fun.args = list(conf.int = 0.9)) +
geom_smooth(stat = 'summary', color = 'blue', fill = 'blue', alpha = 0.2,
fun.data = median_hilow, fun.args = list(conf.int = 0.50)) +
geom_hline(yintercept = 1.35)
ee <- 1.35
sum(c(rowMedians(cumelative_error_F)<ee),rowMedians(cumelative_error_R)<ee)
sum(rowMedians(cumelative_error_F)<ee)
sum(rowMedians(cumelative_error_R)<ee)
drr <- derepFastq(FQF)
drr
sum(table(drr$map)==1)
sum(table(drr$map)!=1)
drfut <- derepFastq(FQR)
drfut
sum(table(drfut$map)==1)
sum(table(drfut$map)!=1)
length_trimmed_forward=240 # not optimal, check the error profiles for optimal trimming
length_trimmed_reverse=240 # not optimal, check the error profiles for optimal trimming
# filtered output files
FQFF <- "FQFF.gz"
FQRF <- "FQRF.gz"
out <- filterAndTrim(FQF, FQFF, FQR, FQRF,
truncLen=c(length_trimmed_forward,length_trimmed_reverse),
maxN=0, truncQ=0, rm.phix=F, compress=TRUE)
out
drf <- derepFastq(FQFF)
drf
sum(table(drf$map)==1)
drr <- derepFastq(FQRF)
drr
sum(table(drr$map)==1)
errF <- readRDS("./Raw_data/L3_dada2.errF.RDS")
plotErrors(errF, nominalQ=TRUE)
errR <- readRDS("./Raw_data/L3_dada2.errR.RDS")
plotErrors(errR, nominalQ=TRUE)
asv.f <- dada(derep = drf, err = errF)
asv.f
asv.r <- dada(derep = drr, err = errR)
asv.r
table(is.na(asv.f$map[drr$map]),is.na(asv.r$map[drf$map]))
sum(is.na(asv.f$map[drr$map]) | is.na(asv.r$map[drf$map]))
x=40
asv.f$denoised[x]
F_ASV_4.FQ <- Biostrings::readQualityScaledDNAStringSet(FQFF)[drf$map %in% which(asv.f$map %in% x)]
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[x])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist)); abline(v = 2.4*3, col="red")
sum(read_asv_ham_dist>7.2)
seq_abun <- data.frame(abundance=table(as.character(F_ASV_4.FQ)))
seq_abun$hamming_distance <- nwhamming(as.character(seq_abun$abundance.Var1), asv.f$sequence[x])
ggplot(seq_abun, aes(x=abundance.Freq, y=hamming_distance)) + geom_point() + scale_x_log10() + geom_hline(yintercept = 7.5) + geom_hline(yintercept = 2.5)
#compare all vs all; very computational intesive
asv.dist.mat <- lapply(as.character(seq_abun$abundance.Var1), function(x) nwhamming(as.character(seq_abun$abundance.Var1), x))
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
plot(tree)
OTU <- cutree(tree = tree, h = 0.03)
PCoA <- pcoa(as.dist(simmat))
df <- data.frame(cbind(PCoA$points[,1:2]))
df$cluster <- as.factor(OTU)
PCoA$values
PCoA$vectors
PCoA$vectors[,1:2]
df <- data.frame(cbind(PCoA$vectors[,1:2]))
df$cluster <- as.factor(OTU)
df$abundance <- seq_abun$abundance.Freq
ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse()
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
plot(tree)
plot(tree) + abline(h=0.03)
plot(tree) + abline(h=0.03, col="red")
plot.phylo(tree)
tree
plot.phylo
tree
tree$merge
plot.phylo(tree$merge)
plot.phylo(as.phylo(tree))
plot.phylo(as.phylo(tree))
plot.phylo(as.phylo(tree), direction = "upwards")
plot.phylo(as.phylo(tree), direction = "downwards")
plot.phylo(as.phylo(tree), direction = "downwards") + abline(h=0.03)
plot.phylo(as.phylo(tree), direction = "downwards") + abline(h=0.03, col="red")
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F) + abline(h=0.03)
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F) + abline(h=0.03)
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F)
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F); abline(h=0.03)
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F); abline(h=0.03, col="red")
cutree(as.phylo(tree))
cutree(as.phylo(tree), h = 0.03)
cutree(tree, h = 0.03)
table(cutree(tree, h = 0.03))
ape::col
simmat <- do.call(rbind, asv.dist.mat)/430
# setting global options for the rmd markdown
knitr::opts_chunk$set(echo = T) # include chunck code
knitr::opts_chunk$set(cache = T) # use chuck results from cache if not modified (speed)
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Load_data.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Manual_Download_github.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/rmd_from_rstudio.png")
}
if (!"knitr" %in% installed.packages()){install.packages("knitr")}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Library_prep.png")
}
.cran_packages <- c("ggplot2", "reshape2", "stringr","phangorn","DT","ape","ggrepel","knitr","Hmisc")
.bioc_packages <- c("dada2", "phyloseq","ShortRead","DECIPHER","ggtree")
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
theme_set(theme_bw())
FQF <- "./Raw_data/L3_MOCK1.F.fastq.gz"
FQR <- "./Raw_data/L3_MOCK1.R.fastq.gz"
plotQualityProfile(c(FQF,FQR))
# get the expected error rates and generate the data.frame
cumelative_error_F <- apply(10^(-as.matrix(PhredQuality(quality(readFastq(FQF)[1:1000])))/10),1,cumsum)
cumelative_error_R <- apply(10^(-as.matrix(PhredQuality(quality(readFastq(FQR)[1:1000])))/10),1,cumsum)
# convert the data into long format (required for ggplot2)
cumelative_error_F_long <- data.frame(reshape2::melt(cumelative_error_F), read="Forward")
cumelative_error_R_long <- data.frame(reshape2::melt(cumelative_error_R), read="Reverse")
df.long <- rbind(cumelative_error_F_long, cumelative_error_R_long)
#df.long$Var1 <- factor(ceiling(df.long$Var1/10)*10) # bin the cycles into ba
ggplot(df.long, aes(x=Var1, y=value)) +
labs(y="Cumulative expected error rate", x="Cycle number") +
facet_wrap(~read) +
geom_smooth(stat = 'summary', color = 'red', fill = 'red', alpha = 0.2,
fun.data = median_hilow, fun.args = list(conf.int = 0.9)) +
geom_smooth(stat = 'summary', color = 'blue', fill = 'blue', alpha = 0.2,
fun.data = median_hilow, fun.args = list(conf.int = 0.50)) +
geom_hline(yintercept = 1.35)
ee <- 1.35
sum(c(rowMedians(cumelative_error_F)<ee),rowMedians(cumelative_error_R)<ee)
sum(rowMedians(cumelative_error_F)<ee)
sum(rowMedians(cumelative_error_R)<ee)
drr <- derepFastq(FQF)
drr
sum(table(drr$map)==1)
sum(table(drr$map)!=1)
drfut <- derepFastq(FQR)
drfut
sum(table(drfut$map)==1)
sum(table(drfut$map)!=1)
length_trimmed_forward=240 # not optimal, check the error profiles for optimal trimming
length_trimmed_reverse=240 # not optimal, check the error profiles for optimal trimming
# filtered output files
FQFF <- "FQFF.gz"
FQRF <- "FQRF.gz"
out <- filterAndTrim(FQF, FQFF, FQR, FQRF,
truncLen=c(length_trimmed_forward,length_trimmed_reverse),
maxN=0, truncQ=0, rm.phix=F, compress=TRUE)
out
drf <- derepFastq(FQFF)
drf
sum(table(drf$map)==1)
drr <- derepFastq(FQRF)
drr
sum(table(drr$map)==1)
errF <- readRDS("./Raw_data/L3_dada2.errF.RDS")
plotErrors(errF, nominalQ=TRUE)
errR <- readRDS("./Raw_data/L3_dada2.errR.RDS")
plotErrors(errR, nominalQ=TRUE)
asv.f <- dada(derep = drf, err = errF)
asv.f
asv.r <- dada(derep = drr, err = errR)
asv.r
table(is.na(asv.f$map[drr$map]),is.na(asv.r$map[drf$map]))
sum(is.na(asv.f$map[drr$map]) | is.na(asv.r$map[drf$map]))
x=40
asv.f$denoised[x]
F_ASV_4.FQ <- Biostrings::readQualityScaledDNAStringSet(FQFF)[drf$map %in% which(asv.f$map %in% x)]
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[x])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist)); abline(v = 2.4*3, col="red")
sum(read_asv_ham_dist>7.2)
seq_abun <- data.frame(abundance=table(as.character(F_ASV_4.FQ)))
seq_abun$hamming_distance <- nwhamming(as.character(seq_abun$abundance.Var1), asv.f$sequence[x])
ggplot(seq_abun, aes(x=abundance.Freq, y=hamming_distance)) + geom_point() + scale_x_log10() + geom_hline(yintercept = 7.5) + geom_hline(yintercept = 2.5)
#compare all vs all; very computational intesive
asv.dist.mat <- lapply(as.character(seq_abun$abundance.Var1), function(x) nwhamming(as.character(seq_abun$abundance.Var1), x))
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F); abline(h=0.03, col="red")
dist.nodes(x = OTU)
OTU <- cutree(tree = tree, h = 0.03)
PCoA <- pcoa(as.dist(simmat))
df <- data.frame(cbind(PCoA$vectors[,1:2]))
df$cluster <- as.factor(OTU)
df$abundance <- seq_abun$abundance.Freq
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
df$cluste
dist.nodes(x = OTU)
cophenetic(OTU)
cophenetic(as.phylo(OTU))
cophenetic(as.phylo(tree))
cophenetic(tree)
tipglom
tip_glom
dd = as.dist(cophenetic.phylo(tree))
dd = as.dist(cophenetic.phylo(as.phylo(tree)))
psclust = cutree(as.hclust(hcfun(dd, ...)), h = 0.03)
psclust = cutree(as.hclust(agnes(dd, ...)), h = 0.03)
psclust = cutree(as.hclust(dd), h = 0.03)
psclust = cutree(dd, h = 0.03)
psclust = cutree(as.hclust(dd), h = 0.03)
hcfu
hcfun
psclust = cutree(as.hclust(hcfun(dd)), h = 0.03)
psclust = cutree(as.hclust(hcfun(dd, "agnes")), h = 0.03)
psclust = cutree(as.hclust(hcfun(dd, agnes)), h = 0.03)
psclust = cutree(as.hclust(agnes(dd)), h = 0.03)
cluster::agnes()
psclust = cutree(as.hclust(cluster::agnes(dd)), h = 0.03)
psclust
table(psclust)
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F); abline(h=0.015, col="red")
ggtree(tree)
ggtree(tree)
ggtree(tree) + geom_vline(xintercept = 0.03)
ggtree(tree) + geom_vline(xintercept = 0.97)
ggtree(tree)
tree
tree$merge
tree$height
tree
ggtree(tree) + geom_vline(xintercept = 0.11)
ggtree(tree) + geom_vline(xintercept = 0.02)
seq_abun <- data.frame(abundance=table(as.character(F_ASV_4.FQ)))
seq_abun$hamming_distance <- nwhamming(as.character(seq_abun$abundance.Var1), asv.f$sequence[x])
ggplot(seq_abun, aes(x=abundance.Freq, y=hamming_distance)) + geom_point() + scale_x_log10() + geom_hline(yintercept = 7.5) + geom_hline(yintercept = 2.5)
#compare all vs all; very computational intesive
asv.dist.mat <- lapply(as.character(seq_abun$abundance.Var1), function(x) nwhamming(as.character(seq_abun$abundance.Var1), x))
seq_abun
seq_abun$abundance.Var1
seq_abun$abundance.Freq
# seq_abun <- data.frame(abundance=table(as.character(F_ASV_4.FQ)))
# seq_abun$hamming_distance <- nwhamming(as.character(seq_abun$abundance.Var1), asv.f$sequence[x])
#
# ggplot(seq_abun, aes(x=abundance.Freq, y=hamming_distance)) + geom_point() + scale_x_log10() + geom_hline(yintercept = 7.5) + geom_hline(yintercept = 2.5)
#compare all vs all; very computational intesive
asv.dist.mat <- lapply(as.character(seq_abun$abundance.Var1), function(x) nwhamming(as.character(seq_abun$abundance.Var1), x))
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F); abline(h=0.015, col="red")
OTU <- cutree(tree = tree, h = 0.03)
OTU
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F, tip.color = OTU)
table(OTU)
rainbow(57)
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = F, tip.color = rainbow(57)[OTU])
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = T, tip.color = rainbow(57)[OTU])
unique(OTU)
length(unique(OTU))
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = T, tip.color = rainbow(length(unique(OTU)))[OTU])
table(OUT)
table(OTU)
simmat <- do.call(rbind, asv.dist.mat)/430
tree <- hclust(as.dist(simmat))
OTU <- cutree(tree = tree, h = 0.03)
table(OTU)
plot.phylo(as.phylo(tree), direction = "downwards", show.tip.label = T, tip.color = rainbow(length(unique(OTU)))[OTU])
length(table(OTU))
dd = as.dist(cophenetic.phylo(as.phylo(tree)))
psclust = cutree(as.hclust(cluster::agnes(dd)), h = 0.03)
PCoA <- pcoa(as.dist(simmat))
df <- data.frame(cbind(PCoA$vectors[,1:2]))
df$cluster <- as.factor(OTU)
df$abundance <- seq_abun$abundance.Freq
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
df$cluste
PCoA <- pcoa(as.dist(simmat))
df <- data.frame(cbind(PCoA$vectors[,1:2]))
df$cluster <- as.factor(OTU)
df$abundance <- seq_abun$abundance.Freq
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
df$cluste
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
PCoA <- pcoa(as.dist(simmat))
df <- data.frame(cbind(PCoA$vectors[,1:2]))
df$cluster <- as.factor(OTU)
df$abundance <- seq_abun$abundance.Freq
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
PCoA <- pcoa(as.dist(simmat))
df <- data.frame(cbind(PCoA$vectors[,1:2]))
df$cluster <- as.factor(OTU)
df$abundance <- seq_abun$abundance.Freq
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse())
df$cluster
table(df$cluster)
table(df$cluster)>3
which(table(df$cluster)>3)
names(which(table(df$cluster)>3))
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse(data = df[df$cluster %in% names(which(table(df$cluster)>3)),]))
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse(data = df[df$cluster %in% names(which(table(df$cluster)>2)),]))
suppressMessages(ggplot(df, aes(x=Axis.1, y=Axis.2, size=abundance, color=cluster)) + geom_point() + stat_ellipse(data = df[df$cluster %in% names(which(table(df$cluster)>3)),]))
aggregate(seq_abun$abundance.Freq, by=list(OTU), FUN=sum)
#### init ####
library(phyloseq)
library(ggplot2)
library(vegan)
ps.miRNA <- readRDS("Rdata/ps.RDS")
ps.miRNA <- rarefy_even_depth(ps.miRNA, rngseed = 211202, replace = F,
sample.size = 3000)
ps.miRNA.baseline <- prune_samples(ps.miRNA@sam_data$Timepoint==1, ps.miRNA)
ps.16S <- readRDS("./16S/ps.FATLOSEII.RDS")
ps.sample.mapping <- read.csv("16S/Mapping.csv",sep=";", row.names = 1)
ps.16S@sam_data$Subject_ID <- gsub("MPP_","MP_",ps.16S@sam_data$Subject_ID)
ps.16S@sam_data$Subject_ID <- as.character(ps.sample.mapping[ps.16S@sam_data$Subject_ID,]$Subject_ID2)
ps.16S <- rarefy_even_depth(ps.16S, replace = F, rngseed = 211202, sample.size = 30000)
ps.16S.baseline <- prune_samples(ps.16S@sam_data$Time_Point==0, ps.16S)
#### test technical confounding ####
