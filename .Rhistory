seqtab.nochim <- seqtab[,names(which(!bimeras))]
seqtab <- makeSequenceTable(asv.m)
bimeras <- isBimeraDenovo(seqtab)
asv.m$bimera <- bimeras[asv.m$sequence]
sum(bimeras)
sum(na.omit(asv.m$abundance[asv.m$bimera]))
seqtab.nochim <- seqtab[,names(which(!bimeras))]
colnames(seqtab)
seqtab
asv.m[asv.m$accept]
asv.m[asv.m$accept,]
asv.m <- mergePairs(dadaF = asv.f, derepF = drf, dadaR = asv.r, derepR = drr, returnRejects = T, maxMismatch = 0)
head(asv.m)
length(asv.m$accept)
sum(asv.m$accept)
sum(asv.m[asv.m$accept,]$abundance)
sum(asv.m[!asv.m$accept,]$abundance)
seqtab <- makeSequenceTable(asv.m[asv.m$accept,])
bimeras <- isBimeraDenovo(seqtab)
asv.m$bimera <- bimeras[asv.m$sequence]
sum(na.omit(asv.m$abundance[asv.m$bimera]))
sum(bimeras)
seqtab.nochim <- seqtab[,names(which(!bimeras))]
length(seqtab.nochim)
sum(seqtab.nochim)
# read in the sequences of the mock
mockref <- as.character(readDNAStringSet("./Raw_data/Mock_reference_NoN.fasta"))
mockref
names(mockref)
table(mockref)
sort(table(mockref))
duplicated(mockref)
which(duplicated(mockref))
mockref[which(duplicated(mockref))]
which(duplicated(mockref))
duplicated(mockref)
mockref[mockref==mockref[duplicated(mockref)]]
# Apperently the 16S sequences of the members in the mock are not unique!
names(mockref)[mockref==names(which(table(mockref)!=1))]
hamming.distance.mat <- matrix(nrow = length(asv.valid.seqs), ncol = length(mockref), NA)
asv.valid.seqs
lapply(asv.valid.seqs, function(x) nwhamming(x, mockref))
do.call(rbind, lapply(asv.valid.seqs, function(x) nwhamming(x, mockref)))
hamming.list <- lapply(asv.valid.seqs, function(x) nwhamming(x, mockref))
do.call(rbind, hamming.list)
hamming.distance.mat <- do.call(rbind, hamming.list)
colnames(hamming.distance.mat) <- mockref
rownames(hamming.distance.mat) <- asv.valid.seqs
hamming.distance.mat.long <- setNames(melt(hamming.distance.mat), c('asv', 'mock', 'dist'))
hamming.distance.mat.long$asv
#Get the closest relative for each mock and asv
mockrefdist <- aggregate(dist ~ mock, data = hamming.distance.mat.long, min)
asvrefdist <- aggregate(dist ~ asv, data = hamming.distance.mat.long, min)
asvrefdist$name <- factor(paste0("ASV_",1:100), levels=paste0("ASV_",1:100))
asvrefdist
asvrefdist$name <- factor(paste0("ASV_",1:length(asv.valid.seqs)))
mockrefdist$name <- factor(names(mockref)[match(mockref, mockrefdist$mock)], levels=names(mockref))
ggplot(mockrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
labs(y="Minimum hamming distance", title="Distance mock to representive asv (Recall)", x=NULL)
colMins(hamming.distance.mat)
rowMins(hamming.distance.mat)
hamming.list[[1]]
hamming.list[[2]]
hamming.list[[3]]
hamming.distance.mat <- do.call(rbind, hamming.list)
hamming.distance.mat[1,]
rowMin(hamming.distance.mat)
#Get the closest relative for each mock and asv
mockrefdist <- colMins(hamming.distance.mat)
mockrefdist
mockrefdist$name <- factor(names(mockref)[match(mockref, mockrefdist$mock)], levels=names(mockref))
factor(names(mockref)[match(mockref, mockrefdist$mock)], levels=names(mockref))
mockref
names(mockref)
#Get the closest relative for each mock and asv
mockrefdist <- data.frame(dist=colMins(hamming.distance.mat),
name=names(mockref))
ggplot(mockrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
labs(y="Minimum hamming distance", title="Distance mock to representive asv (Recall)", x=NULL)
#Get the closest relative for each mock and asv
mockrefdist <- data.frame(dist = colMins(hamming.distance.mat),
name = names(mockref))
ggplot(mockrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
labs(y="Minimum hamming distance", title="Distance mock to representive asv (Recall)", x=NULL)
ggplot(asvrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
ggplot2::geom_hline(yintercept = 5, col='red') +
labs(y="Minimum hamming distance", title="Distance asv to mock representive (Precision)", x=NULL)
asvrefdist
str_pad(as.character(1:length(asv.valid.seqs)))
stringr::str_pad(as.character(1:length(asv.valid.seqs)))
stringr::str_pad(as.character(1:length(asv.valid.seqs))), width=3)
stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3)
stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")
paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0"))
asvrefdist <- data.frame(dist = rowMin(hamming.distance.mat),
name = paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")))
ggplot(asvrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
ggplot2::geom_hline(yintercept = 5, col='red') +
labs(y="Minimum hamming distance", title="Distance asv to mock representive (Precision)", x=NULL)
ggplot(mockrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
labs(y="Minimum hamming distance", title="Distance mock to representive asv (Recall)", x=NULL)
ggplot(asvrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
ggplot2::geom_hline(yintercept = 5, col='red') +
labs(y="Minimum hamming distance", title="Distance asv to mock representive (Precision)", x=NULL)
# False positive ASVs
sum(asvrefdist$dist>=6)
# False positive ASVs total reads
sum(seqtab.nochim[asvrefdist$dist>=6])
mockref
names(mockref)
# Apperently the 16S sequences of the members in the mock are not unique!
names(mockref)[mockref==names(which(table(mockref)!=1))]
#remove duplicated and missing members from mock4.
mockref <- mockref[!names(mockref) %in% c("MC_5 Bifidobacterium MC_5",
"MC_6 Bifidobacterium MC_6",
"MC_7 Bifidobacterium MC_7",
"MC_8 Bifidobacterium MC_8",
"MC_9 Bifidobacterium MC_9",
"MC_10 Bifidobacterium MC_10",
"MC_16 Bacteroides MC_16")
]
colnames(seqtab.nochim)
names(seqtab.nochim)
asv.valid.seqs <- names(seqtab.nochim)
# read in the sequences of the mock
mockref <- as.character(readDNAStringSet("./Raw_data/Mock_reference_NoN.fasta"))
# Apperently the 16S sequences of the members in the mock are not unique!
names(mockref)[mockref==names(which(table(mockref)!=1))]
#remove duplicated and missing members from mock4.
mockref <- mockref[!names(mockref) %in% c("MC_5 Bifidobacterium MC_5",
"MC_6 Bifidobacterium MC_6",
"MC_7 Bifidobacterium MC_7",
"MC_8 Bifidobacterium MC_8",
"MC_9 Bifidobacterium MC_9",
"MC_10 Bifidobacterium MC_10",
"MC_16 Bacteroides MC_16")
]
hamming.list <- lapply(asv.valid.seqs, function(x) nwhamming(x, mockref))
hamming.distance.mat <- do.call(rbind, hamming.list)
colnames(hamming.distance.mat) <- mockref
rownames(hamming.distance.mat) <- asv.valid.seqs
hamming.distance.mat.long <- setNames(melt(hamming.distance.mat), c('asv', 'mock', 'dist'))
#Get the closest relative for each mock and asv
mockrefdist <- data.frame(dist = colMins(hamming.distance.mat),
name = names(mockref))
asvrefdist <- data.frame(dist = rowMin(hamming.distance.mat),
name = paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")))
read.csv("./Raw_data/Mock.composition.txt")
read.csv("./Raw_data/Mock.composition.txt", sep="\t")
read.csv("./Raw_data/Mock.composition.txt", sep="\t")
read.csv("./Raw_data/Mock.composition.txt", sep="\t", header = F)
read.csv("./Raw_data/Mock.composition.txt", sep="\t", header = F)
download.file("https://zenodo.org/record/1172783/files/silva_nr_v132_train_set.fa.gz?download=1")
download.file("https://zenodo.org/record/1172783/files/silva_nr_v132_train_set.fa.gz?download=1", "./Raw_data/silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(seqtab.nochim, refFasta = "silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(seqtab.nochim, refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(names(seqtab.nochim), refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz")
names(seqtab.nochim)
asv.valid.seqs
dada2::assignTaxonomy(seqs = asv.valid.seqs, refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(seqs = asv.valid.seqs, refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(seqs = asv.valid.seqs, refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(seqs = asv.valid.seqs, refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz", multithread=FALSE)
asv.valid.seqs
str(asv.valid.seqs)
dada2::assignTaxonomy(seqs = asv.valid.seqs[2], refFasta = "./Raw_data/silva_nr_v132_train_set.fa.gz", multithread=FALSE)
dada2::assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz", multithread=FALSE)
dada2::assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
dada2::assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
DECIPHER::IdTaxa(test = asv.valid.seqs, trainingSet = "Raw_data/silva_nr_v132_train_set.fa.gz")
DECIPHER::IdTaxa(test = DNAStringSet(asv.valid.seqs), trainingSet = "Raw_data/silva_nr_v132_train_set.fa.gz")
DECIPHER::IdTaxa(test = DNAStringSet(asv.valid.seqs), trainingSet = readDNAStringSet("./Raw_data/silva_nr_v132_train_set.fa.gz"))
gz("./Raw_data/silva_nr_v132_train_set.fa.gz")
gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz")
DECIPHER::IdTaxa(test = DNAStringSet(asv.valid.seqs), trainingSet = readDNAStringSet(gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz")))
DECIPHER::IdTaxa(test = DNAStringSet(asv.valid.seqs), trainingSet = gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz"))
DECIPHER::IdTaxa(test = DNAStringSet(asv.valid.seqs), trainingSet = readDNAStringSet(gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz")))
readDNAStringSet(gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz"))
readDNAStringSet(gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz", "rt"))
gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz", "rt")
gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz")
readLines(gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz"))[1:2]
readLines(gzfile("./Raw_data/silva_nr_v132_train_set.fa.gz"))[1:2]
assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
tax <- assignTaxonomy(seqs = asv.valid.seqs[2],"./Raw_data/silva_nr_v132_train_set.fa.gz")
mockref
asv.valid.seqs <- names(seqtab.nochim)
# read in the sequences of the mock
mockref <- as.character(readDNAStringSet("./Raw_data/Mock_reference_NoN.fasta"))
insilicopcr <- list()
for(ref in names(mockref)){
refseq <- mockref[ref]
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=3, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end <- vmatchPattern(pattern = "GACTACAAGGGTATCTAATCC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start.i <- endIndex(start)[[1]]+1
end.i <- startIndex(end)[[1]]-1
if (!(isEmpty(start.i) | isEmpty(end.i))){insilicopcr[[ref]] <- Biostrings::subseq(refseq, start = start.i, end = end.i)}
}
unlist(insilicopcr)
refseq <- mockref[ref]
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=3, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start
end <- vmatchPattern(pattern = "GACTACAAGGGTATCTAATCC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end
end <- vmatchPattern(pattern = "GACTACAAGGGTATCTAATCC", subject = refseq,
max.mismatch=8, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end
reverseComplement("GACTACAAGGGTATCTAATCC")
reverseComplement(DNAStringSet("GACTACAAGGGTATCTAATCC"))
end <- vmatchPattern(pattern = "GGATTAGATACCCTTGTAGTC", subject = refseq,
max.mismatch=8, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end
end <- vmatchPattern(pattern = "GGATTAGATACCCTTGTAGTC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end
insilicopcr <- list()
for(ref in names(mockref)){}
for(ref in names(mockref)){
refseq <- mockref[ref]
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=3, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end <- vmatchPattern(pattern = "GGATTAGATACCCTTGTAGTC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start.i <- endIndex(start)[[1]]+1
end.i <- startIndex(end)[[1]]-1
if (!(isEmpty(start.i) | isEmpty(end.i))){insilicopcr[[ref]] <- Biostrings::subseq(refseq, start = start.i, end = end.i)}
}
refseq
end
start
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=2, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=1, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start
asv.valid.seqs <- names(seqtab.nochim)
# read in the sequences of the mock
mockref <- as.character(readDNAStringSet("./Raw_data/Mock_reference_NoN.fasta"))
insilicopcr <- list()
for(ref in names(mockref)){
refseq <- mockref[ref]
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=1, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end <- vmatchPattern(pattern = "GGATTAGATACCCTTGTAGTC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start.i <- endIndex(start)[[1]]+1
end.i <- startIndex(end)[[1]]-1
if (!(isEmpty(start.i) | isEmpty(end.i))){insilicopcr[[ref]] <- Biostrings::subseq(refseq, start = start.i, end = end.i)}
}
insilicopcr
unlist*
(insilicopcr)
unlist(insilicopcr)
nchar(unlist(insilicopcr))
sort(nchar(unlist(insilicopcr)))
length(unlist(insilicopcr))
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep="\t", header = F)
mock.comp
rownames(mock.comp)
rownames(mock.comp) <- names(mockref)
rownames(mock.comp)
write.csv(mock.comp, "./Raw_data/Mock.composition.txt")
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep="\t", header = F)
mock.comp
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep=",", header = F)
mock.comp
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T)
mock.comp
colnames(mock.comp)
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T, row.names = 1)
colnames(mock.comp)
colnames(mock.comp)
mock.comp[1:2,]
colnames(mock.comp) <- c("Kingomd","Phylum","Class","Order","Family","Family","Genus","MC1","MC2","MC3","MC4")
write.csv(mock.comp, "./Raw_data/Mock.composition.txt")
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T, row.names = 1)
mock.comp
mock.comp[1:2,]
mock.comp[,1]
mock.comp[,-1]
mock.comp <- mock.comp[,-1]
colnames(mock.comp) <- c("Kingomd","Phylum","Class","Order","Family","Genus","MC1","MC2","MC3","MC4")
mock.comp
colnames(mock.comp) <- c("Kingdom","Phylum","Class","Order","Family","Genus","MC1","MC2","MC3","MC4")
write.csv(mock.comp, "./Raw_data/Mock.composition.txt")
mock.comp <- read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T, row.names = 1)
mock.comp[1:2,]
mock.comp <- data.frame(read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T, row.names = 1))
mock.comp
unlist(insilicopcr)
unname(unlist(insilicopcr))
mock.comp$ASV <- unname(unlist(insilicopcr))
mock.comp
mock.comp$ASV
mock.comp$ASV %in% asv.valid.seqs
sum(mock.comp$ASV %in% asv.valid.seqs)
table(mock.comp$ASV)
unname(table(mock.comp$ASV))
sort(unname(table(mock.comp$ASV)))
.cran_packages <- c("ggplot2", "reshape2", "stringr","phangorn")
.bioc_packages <- c("dada2", "phyloseq","ShortRead","DECIPHER")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
source("http://bioconductor.org/biocLite.R")
biocLite(.bioc_packages[!.inst], ask = F)
}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
theme_set(theme_bw())
drf <- derepFastq(FQFF)
drf
sum(table(drf$map)==1)
drr <- derepFastq(FQRF)
drr
sum(table(drr$map)==1)
drr <- derepFastq(FQF)
drr
sum(table(drr$map)==1)
sum(table(drr$map)!=1)
drfut <- derepFastq(FQR)
drfut
sum(table(drfut$map)==1)
sum(table(drfut$map)!=1)
sum(is.na(asv.f$map[drr$map]) | is.na(asv.r$map[drf$map]))
table(is.na(asv.f$map[drr$map]),is.na(asv.r$map[drf$map]))
seqtab <- makeSequenceTable(asv.m[asv.m$accept,])
bimeras <- isBimeraDenovo(seqtab)
asv.m$bimera <- bimeras[asv.m$sequence]
sum(bimeras)
sum(na.omit(asv.m$abundance[asv.m$bimera]))
tax
seqs <- asv.valid.seqs
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
seqs <- asv.valid.seqs
names(seqs) <- asv.valid.seqs
asv.valid.seqs <- names(seqtab.nochim)
# read in the sequences of the mock
mockref <- as.character(readDNAStringSet("./Raw_data/Mock_reference_NoN.fasta"))
insilicopcr <- list()
for(ref in names(mockref)){
refseq <- mockref[ref]
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=1, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end <- vmatchPattern(pattern = "GGATTAGATACCCTTGTAGTC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start.i <- endIndex(start)[[1]]+1
end.i <- startIndex(end)[[1]]-1
if (!(isEmpty(start.i) | isEmpty(end.i))){insilicopcr[[ref]] <- Biostrings::subseq(refseq, start = start.i, end = end.i)}
}
mock.comp <- data.frame(read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T, row.names = 1))
mock.comp$ASV <- unname(unlist(insilicopcr))
mock.comp$ASV %in% names(seqtab.nochim)
mock.comp[,c("ASV","MC4")]
seqtab.nochim
tax
rownames(mock.comp)
hamming.list <- lapply(asv.valid.seqs, function(x) nwhamming(x, mock.comp$ASV))
hamming.distance.mat <- do.call(rbind, hamming.list)
colnames(hamming.distance.mat) <- rownames(mock.comp)
rownames(hamming.distance.mat) <- asv.valid.seqs
hamming.distance.mat.long <- setNames(melt(hamming.distance.mat), c('asv', 'mock', 'dist'))
hamming.distance.mat.long
#Get the closest relative for each mock and asv
mockrefdist <- data.frame(dist = colMins(hamming.distance.mat),
name = names(mockref))
ggplot(mockrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
labs(y="Minimum hamming distance", title="Distance mock to representive asv (Recall)", x=NULL)
mockrefdist
mock.comp
hamming.distance.mat
hamming.distance.mat[1,]
hamming.distance.mat[,1]
sort(hamming.distance.mat[,1], decreasing = T)
seqtab.nochim["TGGGGAATATTGCACAATGGGCGCAAGCCTGATGCAGCGACGCCGCGTGAGGGATGACGGCCTTCGGGTTGTAAACCTCTTTCAGTACCGACGAAGCGCAAGTGACGGTAGGTACAGAAGAAGCACCGGCCAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGTGCGAGCGTTGTCCGGAATTACTGGGCGTAAAGAGCTCGTAGGCGGTTTGTCGCGTCGTCTGTGAAAACCCGCAGCTCAACTGCGGGCTTGCAGGCGATACGGGCAGACTTGAGTACTGCAGGGGAGACTGGAATTCCTGGTGTAGCGGTGAAATGCGCAGATATCAGGAGGAACACCGGTGGCGAAGGCGGGTCTCTGGGCAGTAACTGACGCTGAGGAGCGAAAGCGTGGGTAGCGAACA "]
seqtab.nochim["TGGGGAATATTGCACAATGGGCGCAAGCCTGATGCAGCGACGCCGCGTGAGGGATGACGGCCTTCGGGTTGTAAACCTCTTTCAGTACCGACGAAGCGCAAGTGACGGTAGGTACAGAAGAAGCACCGGCCAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGTGCGAGCGTTGTCCGGAATTACTGGGCGTAAAGAGCTCGTAGGCGGTTTGTCGCGTCGTCTGTGAAAACCCGCAGCTCAACTGCGGGCTTGCAGGCGATACGGGCAGACTTGAGTACTGCAGGGGAGACTGGAATTCCTGGTGTAGCGGTGAAATGCGCAGATATCAGGAGGAACACCGGTGGCGAAGGCGGGTCTCTGGGCAGTAACTGACGCTGAGGAGCGAAAGCGTGGGTAGCGAACA"]
hamming.distance.mat[1,1]
hamming.distance.mat[1:2,1:2]
hamming.distance.mat[,1]
sort(hamming.distance.mat[,1], decreasing = T)
mock.comp
sort(hamming.distance.mat[,17], decreasing = T)
seqtab["TGAGGAATATTGGTCAATGGCCGAGAGGCTGAACCAGCCAAGTCGCGTGAGGGATGAAGGTTCTATGGATCGTAAACCTCTTTTATAAGGGAATAAAGTGCGGGACGTGTCCCGTTTTGTATGTACCTTATGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGATCCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGTAGGCGGCCTTTTAAGTCAGCGGTGAAAGTCTGTGGCTCAACCATAGAATTGCCGTTGAAACTGGGGGGCTTGAGTATGTTTGAGGCAGGCGGAATGCGTGGTGTAGCGGTGAAATGCATAGATATCACGCAGAACCCCGATTGCGAAGGCAGCCTGCCAAGCCATTACTGACGCTGATGCACGAAAGCGTGGGGATCAAACA"]
seqtab.nochim["TGAGGAATATTGGTCAATGGCCGAGAGGCTGAACCAGCCAAGTCGCGTGAGGGATGAAGGTTCTATGGATCGTAAACCTCTTTTATAAGGGAATAAAGTGCGGGACGTGTCCCGTTTTGTATGTACCTTATGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGATCCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGTAGGCGGCCTTTTAAGTCAGCGGTGAAAGTCTGTGGCTCAACCATAGAATTGCCGTTGAAACTGGGGGGCTTGAGTATGTTTGAGGCAGGCGGAATGCGTGGTGTAGCGGTGAAATGCATAGATATCACGCAGAACCCCGATTGCGAAGGCAGCCTGCCAAGCCATTACTGACGCTGATGCACGAAAGCGTGGGGATCAAACA"]
mock.comp
54/55
asvrefdist <- data.frame(dist = rowMin(hamming.distance.mat),
name = paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")))
asvrefdist <- data.frame(dist = rowMin(hamming.distance.mat),
name = paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")))
ggplot(asvrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
ggplot2::geom_hline(yintercept = 5, col='red') +
labs(y="Minimum hamming distance", title="Distance asv to mock representive (Precision)", x=NULL)
# False positive ASVs
sum(asvrefdist$dist>=6)
# False positive ASVs total reads
sum(seqtab.nochim[asvrefdist$dist>=6])
asvrefdist <- data.frame(dist = rowMin(hamming.distance.mat),
name = paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")))
ggplot(asvrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
ggplot2::geom_hline(yintercept = 5, col='red') +
labs(y="Minimum hamming distance", title="Distance asv to mock representive (Precision)", x=NULL)
# False positive ASVs
sum(asvrefdist$dist>=5)
# False positive ASVs total reads
sum(seqtab.nochim[asvrefdist$dist>=6])
asvrefdist
63/80
seqs <- asv.valid.seqs
names(seqs) <- asv.valid.seqs
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm)
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
if (optim==T){
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
}
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
#fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
#                      rearrangement = "stochastic", control = pml.control(trace = 0))
fitGTR$tree
data.table::data.table(mock.comp)
DT::datatable(mock.comp)
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/taxanomic_ranks.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/taxanomic_ranks.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/taxanomic_ranks.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/taxanomic_ranks.png")
}
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/taxanomic_ranks.png")
}
