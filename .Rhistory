asv.f
asv.f$denoised
asv.f$denoised[4]
drf$map[asv.f$map %in% c("4")]
table(drf$map[asv.f$map %in% c("4")])
asv.f$map
asv.f$map %in% "4"
asv.f$map %in% "4"
whihc(asv.f$map %in% "4")
which(asv.f$map %in% "4")
drf$map
drf$map %in% which(asv.f$map %in% "4")
sum(drf$map %in% which(asv.f$map %in% "4"))
asv.f$denoised[4]
sum(drf$map %in% which(asv.f$map %in% "4"))
drf$map %in% which(asv.f$map %in% "4")
F_ASV_4.FQ <- Biostrings::readQualityScaledDNAStringSet(FQFF)[drf$map %in% which(asv.f$map %in% "4")]
F_ASV_4.FQ
sum(as.character(F_ASV_4.FQ) == asv.f$sequence[4])
asv.f$denoised[4]
nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
table(nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4]))
barplot(table(nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])))
plot(cumsum(table(nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4]))))
barplot(table(nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])))
plot(cumsum(table(nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4]))))
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
barplot(table(read_asv_ham_dist))
plot(cumsum(table(read_asv_ham_dist)))
summary(read_asv_ham_dist)
asv.m <- mergePairs(dadaF = asv.f, derepF = drf, dadaR = asv.r, derepR = drr, returnRejects = T, maxMismatch = 0)
DT::datatable(asv.m)
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist))
plot(cumsum(table(read_asv_ham_dist)))
apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ))/10),1,sum)
F_ASV_4.FQ
PhredQuality(F_ASV_4.FQ)
F_ASV_4.FQ@quality
apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum)
apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum)
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist)
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist, xlab="Expected Error")
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist,
xlab="Expected Error", y="Hamming distance")
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist,
xlab="Expected Error", ylab="Hamming distance")
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist))
plot(cumsum(table(read_asv_ham_dist)))
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist,
xlab="Expected Error", ylab="Read-ASV Hamming distance")
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist))
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist,
xlab="Expected Error", ylab="Read-ASV Hamming distance")
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist))
asv.f$sequence[4]
nchar(asv.f$sequence[4])
barplot(table(read_asv_ham_dist)); abline(v = 2.4*3, col="red")
2.4*3
read_asv_ham_dist?7.2
read_asv_ham_dist>7.2
sum(read_asv_ham_dist>7.2)
sum(read_asv_ham_dist>7.2)
sum(read_asv_ham_dist>7.2)/2457
aggregate(seqtab, by=list(tax[,"Genus"]))
aggregate(seqtab, by=list(tax[,"Genus"]), FUN=sum)
aggregate(seqtab.nochim, by=list(tax[,"Genus"]), FUN=sum)
aggregate(t(seqtab.nochim), by=list(tax[,"Genus"]), FUN=sum)
list(tax[,"Genus"])
list(tax[,"Genus"])
tax
tax <- assignTaxonomy(seqs = asv.valid.seqs,"./Raw_data/silva_nr_v132_train_set.fa.gz")
library(ggplot2)
library(ggtree)
groupInfo <- rep("Silva",length(fitGTR$tree$tip.label))
groupInfo[fitGTR$tree$tip.label %in% asvrefdist[asvrefdist$dist>=5,]$name_genus] <- "Xeno_ASV"
groupInfo[fitGTR$tree$tip.label %in% asvrefdist[asvrefdist$dist<5,]$name_genus] <- "Valid_ASV"
groupInfo[substr(fitGTR$tree$tip.label,1,3)=="MC_"] <- "MOCK"
groupInfo <- split(fitGTR$tree$tip.label, groupInfo)
fitGTR$tree <- groupOTU(fitGTR$tree, groupInfo)
test <- fitGTR$tree
attr(test, "Source") <- attributes(fitGTR$tree)$group
p <- ggtree(test, layout = "rectangular")+ geom_tiplab(size=3, aes(color=Source),key_glyph = "rect", ) + ggplot2::xlim(0, 0.3)
p
p
# setting global options for the rmd markdown
knitr::opts_chunk$set(echo = T) # include chunck code
knitr::opts_chunk$set(cache = T) # use chuck results from cache if not modified (speed)
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/Library_prep.png")
}
.cran_packages <- c("ggplot2", "reshape2", "stringr","phangorn","DT")
.bioc_packages <- c("dada2", "phyloseq","ShortRead","DECIPHER","ggtree")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
source("http://bioconductor.org/biocLite.R")
biocLite(.bioc_packages[!.inst], ask = F)
}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE, quietly = T)
theme_set(theme_bw())
FQF <- "./Raw_data/L3_MOCK1.F.fastq.gz"
FQR <- "./Raw_data/L3_MOCK1.R.fastq.gz"
plotQualityProfile(c(FQF,FQR))
# get the expected error rates and generate the data.frame
cumelative_error_F <- apply(10^(-as.matrix(PhredQuality(quality(readFastq(FQF)[1:1000])))/10),1,cumsum)
cumelative_error_R <- apply(10^(-as.matrix(PhredQuality(quality(readFastq(FQR)[1:1000])))/10),1,cumsum)
# convert the data into long format (required for ggplot2)
cumelative_error_F_long <- data.frame(reshape2::melt(cumelative_error_F), read="Forward")
cumelative_error_R_long <- data.frame(reshape2::melt(cumelative_error_R), read="Reverse")
df.long <- rbind(cumelative_error_F_long, cumelative_error_R_long)
#df.long$Var1 <- factor(ceiling(df.long$Var1/10)*10) # bin the cycles into ba
ggplot(df.long, aes(x=Var1, y=value)) +
labs(y="Cumulative expected error rate", x="Cycle number") +
facet_wrap(~read) +
geom_smooth(stat = 'summary', color = 'red', fill = 'red', alpha = 0.2,
fun.data = median_hilow, fun.args = list(conf.int = 0.9)) +
geom_smooth(stat = 'summary', color = 'blue', fill = 'blue', alpha = 0.2,
fun.data = median_hilow, fun.args = list(conf.int = 0.50))
drr <- derepFastq(FQF)
drr
sum(table(drr$map)==1)
sum(table(drr$map)!=1)
drfut <- derepFastq(FQR)
drfut
sum(table(drfut$map)==1)
sum(table(drfut$map)!=1)
length_trimmed_forward=240 # not optimal, check the error profiles for optimal trimming
length_trimmed_reverse=240 # not optimal, check the error profiles for optimal trimming
# filtered output files
FQFF <- "FQFF.gz"
FQRF <- "FQRF.gz"
out <- filterAndTrim(FQF, FQFF, FQR, FQRF,
truncLen=c(length_trimmed_forward,length_trimmed_reverse),
maxN=0, truncQ=0, rm.phix=F, compress=TRUE)
out
drf <- derepFastq(FQFF)
drf
sum(table(drf$map)==1)
drr <- derepFastq(FQRF)
drr
sum(table(drr$map)==1)
errF <- readRDS("./Raw_data/L3_dada2.errF.RDS")
plotErrors(errF, nominalQ=TRUE)
errR <- readRDS("./Raw_data/L3_dada2.errR.RDS")
plotErrors(errR, nominalQ=TRUE)
asv.f <- dada(derep = drf, err = errF)
asv.f
asv.r <- dada(derep = drr, err = errR)
asv.r
table(is.na(asv.f$map[drr$map]),is.na(asv.r$map[drf$map]))
sum(is.na(asv.f$map[drr$map]) | is.na(asv.r$map[drf$map]))
asv.f$denoised[4]
F_ASV_4.FQ <- Biostrings::readQualityScaledDNAStringSet(FQFF)[drf$map %in% which(asv.f$map %in% "4")]
read_asv_ham_dist <- nwhamming(as.character(F_ASV_4.FQ), asv.f$sequence[4])
summary(read_asv_ham_dist)
barplot(table(read_asv_ham_dist)); abline(v = 2.4*3, col="red")
sum(read_asv_ham_dist>7.2)
plot(apply(10^(-as.matrix(PhredQuality(F_ASV_4.FQ@quality))/10),1,sum), read_asv_ham_dist,
xlab="Expected Error", ylab="Read-ASV Hamming distance")
asv.m <- mergePairs(dadaF = asv.f, derepF = drf, dadaR = asv.r, derepR = drr, returnRejects = T, maxMismatch = 0)
DT::datatable(asv.m)
length(asv.m$accept)
sum(asv.m$accept)
sum(asv.m[asv.m$accept,]$abundance)
sum(asv.m[!asv.m$accept,]$abundance)
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("Figures/chimera.gif")
}
seqtab <- makeSequenceTable(asv.m[asv.m$accept,])
bimeras <- isBimeraDenovo(seqtab)
asv.m$bimera <- bimeras[asv.m$sequence]
sum(bimeras)
sum(na.omit(asv.m$abundance[asv.m$bimera]))
seqtab.nochim <- seqtab[,names(which(!bimeras))]
length(seqtab.nochim)
sum(seqtab.nochim)
asv.valid.seqs <- names(seqtab.nochim)
# read in the sequences of the mock
mockref <- as.character(readDNAStringSet("./Raw_data/Mock_reference_NoN.fasta"))
insilicopcr <- list()
for(ref in names(mockref)){
refseq <- mockref[ref]
start <- vmatchPattern(pattern = "CCTACGGGAGGCAGCAG", subject = refseq,
max.mismatch=1, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
end <- vmatchPattern(pattern = "GGATTAGATACCCTTGTAGTC", subject = refseq,
max.mismatch=5, min.mismatch=0,
with.indels=FALSE, fixed=TRUE,
algorithm="auto")
start.i <- endIndex(start)[[1]]+1
end.i <- startIndex(end)[[1]]-1
if (!(isEmpty(start.i) | isEmpty(end.i))){insilicopcr[[ref]] <- Biostrings::subseq(refseq, start = start.i, end = end.i)}
}
mock.comp <- data.frame(read.csv("./Raw_data/Mock.composition.txt", sep=",", header = T, row.names = 1))
mock.comp$ASV <- unname(unlist(insilicopcr))
mock.comp$ASV %in% names(seqtab.nochim)
DT::datatable(mock.comp)
hamming.list <- lapply(asv.valid.seqs, function(x) nwhamming(x, mock.comp$ASV))
hamming.distance.mat <- do.call(rbind, hamming.list)
colnames(hamming.distance.mat) <- rownames(mock.comp)
rownames(hamming.distance.mat) <- asv.valid.seqs
#hamming.distance.mat.long <- setNames(melt(hamming.distance.mat), c('asv', 'mock', 'dist'))
#Get the closest relative for each mock and asv
mockrefdist <- data.frame(dist = colMins(hamming.distance.mat),
name = names(mockref))
ggplot(mockrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
labs(y="Minimum hamming distance", title="Distance mock to representive asv (Recall)", x=NULL)
asvrefdist <- data.frame(dist = rowMin(hamming.distance.mat),
name = paste0("ASV_",stringr::str_pad(as.character(1:length(asv.valid.seqs)), width=3, pad = "0")))
ggplot(asvrefdist, aes(x=name, y=dist)) +
geom_bar(stat="identity") +
coord_flip() +
ggplot2::geom_hline(yintercept = 5, col='red') +
labs(y="Minimum hamming distance", title="Distance asv to mock representive (Precision)", x=NULL)
# False positive ASVs
sum(asvrefdist$dist>=5)
# False positive ASVs total reads
sum(seqtab.nochim[asvrefdist$dist>=6])
if (knitr:::is_latex_output()) {
knitr::asis_output('\\url{....}')
} else {
knitr::include_graphics("./Figures/taxanomic_ranks.png")
}
tax <- assignTaxonomy(seqs = asv.valid.seqs,"./Raw_data/silva_nr_v132_train_set.fa.gz")
# lets inlcude the Genus taxonomy in the name of the ASV
asvrefdist$name_genus <- paste(asvrefdist$name,tax[asv.valid.seqs,"Genus"])
seqs <- c(asv.valid.seqs,mock.comp$ASV)
names(seqs) <- c(asvrefdist$name_genus,mockrefdist$name)
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm)
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
#fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
#                      rearrangement = "stochastic", control = pml.control(trace = 0))
fitGTR$tree <- midpoint(fitGTR$tree)
groupInfo <- rep("Silva",length(fitGTR$tree$tip.label))
groupInfo[fitGTR$tree$tip.label %in% asvrefdist[asvrefdist$dist>=5,]$name_genus] <- "Xeno_ASV"
groupInfo[fitGTR$tree$tip.label %in% asvrefdist[asvrefdist$dist<5,]$name_genus] <- "Valid_ASV"
groupInfo[substr(fitGTR$tree$tip.label,1,3)=="MC_"] <- "MOCK"
groupInfo <- split(fitGTR$tree$tip.label, groupInfo)
fitGTR$tree <- groupOTU(fitGTR$tree, groupInfo)
test <- fitGTR$tree
attr(test, "Source") <- attributes(fitGTR$tree)$group
p <- ggtree(test, layout = "rectangular")+ geom_tiplab(size=3, aes(color=Source),key_glyph = "rect", ) + ggplot2::xlim(0, 0.3)
p
cutree(fitGTR$tree)
cutree(fitGTR$tree)
cutree(fitGTR$tree$edge)
treeNJ
treedist(fitGTR$tree$edge)
phyloseq::tip_glom
dd = as.dist(cophenetic.phylo(fitGTR$tree))
cophenetic.phylo()
psclust = cutree(as.hclust(hcfun(dd, ...)), h = h)
hcfun
psclust = cutree(as.hclust(agnes(dd, ...)), h = h)
agnes
library(ape)
agnes
psclust = cutree(as.hclust(dd, ...)), h = 0.1)
psclust = cutree(as.hclust(dd, ...), h = 0.1)
as.hclust(dd)
hclust(dd)
hclust(dd, method = "agnes")
hclust(dd)
psclust = cutree(hclust(dd), h = 0.1)
psclust
table(psclust)
psclust = cutree(hclust(dd), h = 0.05)
table(psclust)
psclust = cutree(hclust(dd), h = 0.1)
psclust
dd = as.dist(cophenetic.phylo(fitGTR$tree))
psclust = cutree(hclust(dd), h = 0.1)
psclust
table(psclust)
split(psclust, names(psclust))
split(names(psclust), psclust)
cluster_list <- split(names(psclust), psclust)
seqtab.nochim/sum(seqtab.nochim)
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
cluster_list <- split(names(psclust), psclust)
mock.comp$MC3
seqtab.nochim.relabu
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3)
names(Abundances)
names(Abundances) <- names(seqs)
names(Abundances
)
names(Abundances) <- names(seqs)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3)
cluster_list <- split(names(psclust), psclust)
cluster_list
lapply(cluster_list, function(x) Abundances[x])
cluster_list
Abundances
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
Abundances
lapply(cluster_list, function(x) Abundances[x])
lapply(cluster_list, function(x) which.max(Abundances[x]))
unlist(lapply(cluster_list, function(x) Abundances[x]))
names(cluster_list)
cluster_list
psclust
aggregate(seqtab.nochim.relabu, by=list(psclust))
aggregate(seqtab.nochim.relabu, by=list(psclust), FUN=sum)
seqtab.nochim.relabu
aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
aggregate(mock.comp$MC3, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
aggregate(mock.comp$MC3, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3/100)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) Abundances[x])) # representative sequence
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3/100)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) Abundances[x])) # representative sequence
Abundances
cluster_list
names(cluster_list) <- unlist(lapply(cluster_list, function(x) Abundances[x])) # representative sequence
Abundances
cluster_list
cluster_list[1]
cluster_list[[1]]
Abundances[cluster_list[[1]]]
names(cluster_list) <- unlist(lapply(cluster_list, function(x) which.max(Abundances[x]))) # representative sequence
aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
aggregate(mock.comp$MC3, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3/100)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) which.max(Abundances[x]))) # representative sequence
aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
aggregate(mock.comp$MC3, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3/100)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) which.max(Abundances[x]))) # representative sequence
aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
aggregate(mock.comp$MC3/100, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
cl.abundance_sample <- aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
cl.abundance_mock <- aggregate(mock.comp$MC3/100, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
cl.abundance_sample
cl.abundance_mock
cl.abundance_sample
cl.abundance_sample[,14]
cl.abundance_sample[,1]
names(cluster_list)[cl.abundance_sample[,1]]
names(cluster_list)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) which.max(Abundances[x]))) # representative sequence
names(cluster_list)
unlist(lapply(cluster_list, function(x) which.max(Abundances[x])))
unlist(lapply(cluster_list, function(x) names(which.max(Abundances[x]))))
unlist(lapply(cluster_list, function(x) names(which.max(Abundances[x]))))
lapply(cluster_list, function(x) names(which.max(Abundances[x])))
unlist(lapply(cluster_list, function(x) names(which.max(Abundances[x]))))
names(cluster_list) <- unlist(lapply(cluster_list, function(x) names(which.max(Abundances[x])))) # representative sequence
names(cluster_list)
cl.abundance_sample[,1]
names(cluster_list)
names(cluster_list)[cl.abundance_sample[,1]]
rownames(cl.abundance_sample) <- names(cluster_list)[cl.abundance_sample[,1]]
rownames(cl.abundance_mock) <- names(cluster_list)[cl.abundance_mock[,1]]
plot(cl.abundance_sample[names(cluster_list),2],cl.abundance_mock[names(cluster_list),2],)
df <- data.frame(label=cluster_list,
sample=cl.abundance_sample[names(cluster_list),2],
mock=cl.abundance_mock[names(cluster_list),2]
)
df <- data.frame(label=names(cluster_list),
sample=cl.abundance_sample[names(cluster_list),2],
mock=cl.abundance_mock[names(cluster_list),2]
)
ggplot(df, aes(x=sample, y=mock)) + geom_point() + geom_text(aes(label=label))
ggplot(df, aes(x=sample, y=mock)) + geom_point() + geom_text(aes(label=label)) + scale_x_log10()
ggplot(df, aes(x=sample, y=mock)) + geom_point() + geom_text(aes(label=label)) + scale_x_log10() + scale_y_log10()
ggplot(df, aes(x=sample, y=mock)) + geom_point() + ggrepel::geom_text_repel(aes(label=label)) + scale_x_log10() + scale_y_log10()
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
scale_x_log10() +
scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
#scale_x_log10() +
#scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
abline(b = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
abline(a=0,b = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
abline(a=c(0,1)) +
#scale_x_log10() +
#scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
abline(a=c(0,1)) +
#scale_x_log10() +
#scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) + geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
abline(a=0, b = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3/100)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) names(which.max(Abundances[x])))) # representative sequence
cl.abundance_sample <- aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
cl.abundance_mock <- aggregate(mock.comp$MC3/100, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
rownames(cl.abundance_sample) <- names(cluster_list)[cl.abundance_sample[,1]]
rownames(cl.abundance_mock) <- names(cluster_list)[cl.abundance_mock[,1]]
df <- data.frame(label=names(cluster_list),
sample=cl.abundance_sample[names(cluster_list),2],
mock=cl.abundance_mock[names(cluster_list),2]
)
ggplot(df, aes(x=sample, y=mock)) +
geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
abline(a=0, b = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
ggplot(df, aes(x=sample, y=mock)) +
geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
#abline(a=0, b = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
df[is.na(df)]
df[is.na(df)] <- 0
ggplot(df, aes(x=sample, y=mock)) +
geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
#abline(a=0, b = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
?abline
ggplot(df, aes(x=sample, y=mock)) +
geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
geom_abline(slope = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
dd = as.dist(cophenetic.phylo(fitGTR$tree))
psclust = cutree(hclust(dd), h = 0.05)
seqtab.nochim.relabu <- seqtab.nochim/sum(seqtab.nochim)
Abundances <- c(seqtab.nochim.relabu, mock.comp$MC3/100)
names(Abundances) <- names(seqs)
cluster_list <- split(names(psclust), psclust)
names(cluster_list) <- unlist(lapply(cluster_list, function(x) names(which.max(Abundances[x])))) # representative sequence
cl.abundance_sample <- aggregate(seqtab.nochim.relabu, by=list(psclust[c(asvrefdist$name_genus)]), FUN=sum)
cl.abundance_mock <- aggregate(mock.comp$MC3/100, by=list(psclust[c(mockrefdist$name)]), FUN=sum)
rownames(cl.abundance_sample) <- names(cluster_list)[cl.abundance_sample[,1]]
rownames(cl.abundance_mock) <- names(cluster_list)[cl.abundance_mock[,1]]
df <- data.frame(label=names(cluster_list),
sample=cl.abundance_sample[names(cluster_list),2],
mock=cl.abundance_mock[names(cluster_list),2]
)
df[is.na(df)] <- 0
ggplot(df, aes(x=sample, y=mock)) +
geom_point(size=3) +
ggrepel::geom_text_repel(aes(label=label)) +
geom_abline(slope = 1) +
#scale_x_log10() +
#scale_y_log10() +
NULL
